diff --git a/lib/Dancer.pm b/lib/Dancer.pm
index 565514b..827a281 100644
--- a/lib/Dancer.pm
+++ b/lib/Dancer.pm
@@ -15,8 +15,7 @@ use Dancer::Response;
 use Dancer::Route;
 use Dancer::SharedData;
 
-use HTTP::Server::Simple::CGI;
-use base 'Exporter', 'HTTP::Server::Simple::CGI';
+use base 'Exporter';
 
 $AUTHORITY = 'SUKRIA';
 $VERSION = '0.9903';
@@ -35,6 +34,7 @@ $VERSION = '0.9903';
     params
     pass
     path
+    plack_adapter
     post 
     put
     r
@@ -68,6 +68,7 @@ sub pass         { Dancer::Response::pass() }
 sub path         { Dancer::FileUtils::path(@_) }
 sub post         { Dancer::Route->add('post', @_) }
 sub put          { Dancer::Route->add('put', @_) }
+sub plack_adapter { '+Dancer::PlackAdapter' }
 sub r            { {regexp => $_[0]} }
 sub request      { Dancer::SharedData->cgi }
 sub send_file    { Dancer::Helpers::send_file(@_) }
@@ -89,18 +90,11 @@ sub dance {
     # load config.yml if found
     Dancer::Config->load;
 
-    my $ipaddr = setting 'server';
-    my $port   = setting 'port';
+}
 
-    if (setting('daemon')) {
-        my $pid = Dancer->new($port)->background();
-        print ">> Dancer $pid listening on $port\n";
-        return $pid;
-    }
-    else {
-        print ">> Listening on $ipaddr:$port\n";
-        Dancer->new($port)->run();
-    }
+sub run {
+    my $self = shift;
+    $self->handle_request(@_);
 }
 
 # HTTP server overload comes here
diff --git a/lib/Dancer/PlackAdapter.pm b/lib/Dancer/PlackAdapter.pm
new file mode 100644
index 0000000..139bae8
--- /dev/null
+++ b/lib/Dancer/PlackAdapter.pm
@@ -0,0 +1,18 @@
+package Dancer::PlackAdapter;
+use strict;
+
+sub new {
+    my($class, $app) = @_;
+    bless { app => $app }, $class;
+}
+
+sub handler {
+    my $self = shift;
+    return sub {
+        my $env = shift;
+        $CGI::PSGI = 1;
+        Dancer->run(CGI->new($env));
+    };
+}
+
+1;
diff --git a/lib/Dancer/Renderer.pm b/lib/Dancer/Renderer.pm
index b58474b..ecf8a6c 100644
--- a/lib/Dancer/Renderer.pm
+++ b/lib/Dancer/Renderer.pm
@@ -15,7 +15,7 @@ sub render_file {
     my $request = Dancer::SharedData->cgi;
     my $response = get_file_response();
     if ($response) {
-        print_response($response, $request);
+        return response($response, $request);
     }
 }
 
@@ -23,7 +23,7 @@ sub render_action {
     my $request = Dancer::SharedData->cgi;
     my $response = get_action_response();
     if ($response) {
-        print_response($response, $request);
+        return response($response, $request);
     }
 }
 
@@ -32,18 +32,19 @@ sub render_error {
     my $path = $request->path_info;
     my $method = $request->request_method;
 
-    print Dancer::HTTP::status('not_found');
-    print $request->header,
-          $request->start_html('Not found'),
+    #print STDERR "== $method $path 404 Not found\n" if setting('access_log');
+    return [
+        404,
+        [ 'Content-Type' => 'text/html' ],
+        [ $request->start_html('Not found'),
           $request->h1('Not found'),
-          "<p>No route matched your request `$path'.</p>\n".
-          "<p>".
-          "appdir is <code>".setting('appdir')."</code><br>\n".
-          "public is <code>".setting('public')."</code>".
+          "<p>No route matched your request `$path'.</p>\n",
+          "<p>",
+          "appdir is <code>".setting('appdir')."</code><br>\n",
+          "public is <code>".setting('public')."</code>",
           "</p>",
-          $request->end_html;
-
-    print STDERR "== $method $path 404 Not found\n" if setting('access_log');
+          $request->end_html ],
+    ];
 }
 
 sub get_action_response() {
@@ -64,15 +65,17 @@ sub get_file_response() {
     
     
     if (-f $static_file) {
-        return {
-            head => {content_type => get_mime_type($static_file)},
-            body => read_file_content($static_file),
-        };
+        open my $fh, "<", $static_file;
+        return [
+            200,
+            [ 'Content-Type' => get_mime_type($static_file) ],
+            $fh,
+        ];
     }
     return undef;
 }
 
-sub print_response($$) {
+sub response($$) {
     my ($resp, $request) = @_;
     my $path = $request->path_info;
     my $method = $request->request_method;
@@ -80,14 +83,13 @@ sub print_response($$) {
     my $ct = $resp->{head}{content_type} || setting('content_type');
     my $st = Dancer::HTTP::status($resp->{head}{status}) || Dancer::HTTP::status('ok');
 
-    print $st;
-    print $request->header($ct);
-    print $resp->{body};
-    
     if (setting('access_log')) {
         print STDERR "== $method $path $st";
     }
-    return 1;
+
+    return [ $st,
+             [ 'Content-Type' => $ct ],
+             [ $resp->{body} ] ];
 }
 
 # private
