* Route caching support

    When a path is firstly resolved through the route tree, we should
    cache the result for future calls.

    The path would be the cache key, the first route the value.

        1 - GET / -> first call, so browse the route tree
        2 - GET / -> second call, return cache('/');

* Conditions support for route matching: 

    get '/foo', {agent => 'Songbird (\d\.\d)[\d\/]*?'} => sub {
        ...
    };


 render should then use a template system for rendering the view 
 located in $views_directory/index.tpl with $stuff data 

* Template rendering support

    get '/' => sub {
        ...
        render index => $stuff;
    };
 
    Templates are assumed to be located directly under the ./views directory. To
    use a different views directory:

      set views =>  dirname(__FILE__) . '/templates'

* Helper support

    We should provide a way to define helpers, that are basically, methods
    accessible from the action code blocks.

* Error handler support

    Could be interesting to have a real error handler mechanism instead of the 
    single `Dancer::Renderer->render_error' method.

* Helper for rendering a static file within an action

    Once the helper system is ready, we could add one for letting the user 
    render a static file, from an action, like that:

        get '/download/*' => sub {
            my $params = shift;
            my ($file) = @{ $params->{splat} };

            send_file $file;
        };

* Mime Types configuration

    The user should be able to choose specific mime-type per file extensions, if 
    he doesn't like the one Dancer finds when serving a static file.

        mime_type foo => 'text/foo';

    This would tell to serve any file matching '*.foo' as a 'text/foo' content.

* Environment support

    It should be possible to run a Dancer server with a specific environment,
    like development or production.

    This could be done like the following:

    $ ./my-dancer-app.pl --environment=development (which would be the default)

    Then the script appdir/environments/development.pl would be loaded.

    It could contain the following information:

        # a bunch of settings
        setting access_log => 1;
        setting verbosity => 1;


